declare module 'starkbank-ecdsa';

declare module 'starkbank' {
    /** Declaration file generated by dts-gen */

    export class Invoice {
        /**
         *
         * Invoice object
         *
         * @description When you initialize an Invoice, the entity will not be automatically
         * sent to the Stark Bank API. The 'create' function sends the objects
         * to the Stark Bank API and returns the list of created objects.
         * To create scheduled Invoices, which will display the discount, interest, etc. on the final users banking interface,
         * use dates instead of datetimes on the "due" and "discounts" fields.
         *
         * Parameters (required):
         * @param amount            [integer]: Invoice value in cents. Minimum = 0 (R$0,00). ex: 1234 (= R$ 12.34)
         * @param taxId             [string]: payer tax ID (CPF or CNPJ) with or without formatting. ex: '01234567890' or '20.018.183/0001-80'
         * @param name              [string]: payer name. ex: 'Iron Bank S.A.'
         *
         * Parameters (optional):
         * @param due               [string, default now + 2 days]: Invoice due date in UTC ISO format. ex: '2020-11-25T17:59:26.249976+00:00'
         * @param expiration        [integer, default 59 days]: time interval in seconds between due date and expiration date. ex 123456789
         * @param fine              [float, default 2.0]: Invoice fine for overdue payment in %. ex: 2.5
         * @param interest          [float, default 1.0]: Invoice monthly interest for overdue payment in %. ex: 5.2
         * @param discounts         [list of dictionaries, default null]: list of dictionaries with 'percentage':float and 'due':string pairs
         * @param tags              [list of strings, default null]: list of strings for tagging
         * @param descriptions      [list of dictionaries, default null]: list of dictionaries with 'key':string and (optional) 'value':string pairs
         *
         * Attributes (return-only):
         * @param fee               [integer, default null]: fee charged by this Invoice. ex: 65 (= R$ 0.65)
         * @param pdf               [string, default null]: public Invoice PDF URL. ex: 'https://invoice.starkbank.com/pdf/d454fa4e524441c1b0c1a729457ed9d8'
         * @param link              [string, default null]: public Invoice webpage URL. ex: 'https://my-workspace.sandbox.starkbank.com/invoicelink/d454fa4e524441c1b0c1a729457ed9d8'
         * @param nominalAmount     [integer, default null]: Invoice emission value in cents (will change if invoice is updated, but not if it's paid). ex: 400000
         * @param fineAmount        [integer, default null]: Invoice fine value calculated over nominalAmount. ex: 20000
         * @param interestAmount    [integer, default null]: Invoice interest value calculated over nominalAmount. ex: 10000
         * @param discountAmount    [integer, default null]: Invoice discount value calculated over nominalAmount. ex: 3000
         * @param id                [string, default null]: unique id returned when Invoice is created. ex: '5656565656565656'
         * @param brcode            [string, default null]: BR Code for the Invoice payment. ex: '00020101021226800014br.gov.bcb.pix2558invoice.starkbank.com/f5333103-3279-4db2-8389-5efe335ba93d5204000053039865802BR5913Arya Stark6009Sao Paulo6220051656565656565656566304A9A0'
         * @param status            [string, default null]: current Invoice status. ex: 'created', 'paid', 'canceled' or 'overdue'
         * @param transactionIds    [list of strings]: ledger transaction ids linked to this Invoice (if there are more than one, all but the first are reversals or failed reversal chargebacks). ex: ['19827356981273']
         * @param created           [string, default null]: creation datetime for the Invoice. ex: '2020-03-10 10:30:00.000000+00:00'
         * @param updated           [string, default null]: creation datetime for the Invoice. ex: '2020-03-10 10:30:00.000000+00:00'
         */
        amount: number;
        brcode: string;
        created: string;
        descriptions: any;
        discountAmount: number;
        discounts: { percentage: number, due: Date }[]
        due: string;
        expiration: number;
        fee: number;
        pdf: string;
        fine: number;
        fineAmount: number;
        id: number;
        interest: number;
        interestAmount: number;
        name: string;
        nominalAmount: number;
        status: string;
        tags: string[];
        taxId: string;
        updated: string;
        constructor({
            amount,
            taxId,
            name,
            due = 2,
            fine = 0,
            interest = 0,
            expiration = 59,
            descriptions = [],
            discounts = [],
        });
    }

    export class Transfer extends Resource {
        /**
         *
         * Transfer object
         *
         * @description When you initialize a Transfer, the entity will not be automatically
         * created in the Stark Bank API. The 'create' function sends the objects
         * to the Stark Bank API and returns the list of created objects.
         *
         * Parameters (required):
         * @param amount [integer]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
         * @param name [string]: receiver full name. ex: 'Anthony Edward Stark'
         * @param taxId [string]: receiver tax ID (CPF or CNPJ) with or without formatting. ex: '01234567890' or '20.018.183/0001-80'
         * @param bankCode [string]: code of the receiver bank institution in Brazil. If an ISPB (8 digits) is informed, a PIX transfer will be created, else a TED will be issued. ex: '20018183' or '341'
         * @param branchCode [string]: receiver bank account branch. Use '-' in case there is a verifier digit. ex: '1357-9'
         * @param accountNumber [string]: Receiver Bank Account number. Use '-' before the verifier digit. ex: '876543-2'
         * @param accountType [string, default 'checking']: Receiver bank account type. This parameter only has effect on Pix Transfers. ex: 'checking', 'savings', 'salary' or 'payment'
         * @param externalId [string, default null]: url safe string that must be unique among all your transfers. Duplicated external_ids will cause failures. By default, this parameter will block any transfer that repeats amount and receiver information on the same date. ex: 'my-internal-id-123456'
         * @param description [string, default null]: optional description to override default description to be shown in the bank statement. ex: 'Payment for service #1234'
         *
         * Parameters (optional):
         * @param tags [list of strings]: list of strings for reference when searching for transfers. ex: ['employees', 'monthly']
         * @param scheduled [string, default now]: date or datetime when the transfer will be processed. May be pushed to next business day if necessary. ex: '2020-11-12T00:14:22.806+00:00' or '2020-11-30'
         *
         * Attributes (return-only):
         * @param id [string, default null]: unique id returned when Transfer is created. ex: '5656565656565656'
         * @param fee [integer, default null]: fee charged when transfer is created. ex: 200 (= R$ 2.00)
         * @param status [string, default null]: current transfer status. ex: 'processing' or 'success'
         * @param transactionIds [list of strings, default null]: ledger transaction ids linked to this transfer (if there are two, second is the chargeback). ex: ['19827356981273']
         * @param created [string, default null]: creation datetime for the transfer. ex: '2020-03-10 10:30:00.000'
         * @param updated [string, default null]: latest update datetime for the transfer. ex: '2020-03-10 10:30:00.000'
         *
         */

         id: string;
         amount : number;
         name : string;
         taxId : string;
         bankCode : string;
         branchCode : string;
         accountNumber : string;
         accountType : "checking" | "savings" | "salary" | "payment";
         externalId : string;
         scheduled : string;
         tags : string[];
         fee : number;
         status : string;
         created : string;
         updated : string;
         transactionIds : string[];

        constructor({
            amount,
            name,
            taxId,
            bankCode,
            branchCode,
            accountNumber,
            accountType = "checking",
            externalId = "",
            scheduled = "",
            tags = []
        });
    }

    export class Organization {
        constructor(...args: any[]);

        accessId(...args: any[]): void;

    }

    export class Project {
        constructor(...args: any[]);

        accessId(...args: any[]): void;

    }

    export const Balance: any;

    export const cache: {
    };

    export const language: string;

    export var user: Project;

    export const version: string;

    export function Boleto(...args: any[]): void;

    export function BoletoHolmes(...args: any[]): void;

    export function BoletoPayment(...args: any[]): void;

    export function BrcodePayment(...args: any[]): void;

    export function BrcodePreview(...args: any[]): void;

    export function DarfPayment(...args: any[]): void;

    export function Deposit(...args: any[]): void;

    export function DictKey(...args: any[]): void;

    export function Event(...args: any[]): void;

    export function Institution(...args: any[]): void;

    export function PaymentPreview(...args: any[]): void;

    export function PaymentRequest(...args: any[]): void;

    export function TaxPayment(...args: any[]): void;

    export function Transaction(...args: any[]): void;    

    export function UtilityPayment(...args: any[]): void;

    export function Webhook(...args: any[]): void;

    export function Workspace(...args: any[]): void;

    export namespace balance {
        function get({ user }: any): any;

    }

    export namespace boleto {
        function Boleto(...args: any[]): void;

        function create(boletos: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, status, tags, ids, user }: any): any;

        function pdf(id: any, { layout, hiddenFields, user }: any): any;

        function query({ limit, after, before, status, tags, ids, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, boletoIds, user }: any): any;

            function query({ limit, after, before, types, boletoIds, user }: any): any;

        }

    }

    export namespace boletoHolmes {
        function BoletoHolmes(...args: any[]): void;

        function create(holmes: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, ids, status, boletoId, user }: any): any;

        function query({ limit, after, before, tags, ids, status, boletoId, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, holmesIds, user }: any): any;

            function query({ limit, after, before, types, holmesIds, user }: any): any;

        }

    }

    export namespace boletoPayment {
        function BoletoPayment(...args: any[]): void;

        function create(payments: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, ids, status, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, tags, ids, status, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, paymentIds, user }: any): any;

            function query({ limit, after, before, types, paymentIds, user }: any): any;

        }

    }

    export namespace brcodePayment {
        function BrcodePayment(...args: any[]): void;

        function create(payments: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, status, tags, ids, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, status, tags, ids, user }: any): any;

        function update(id: any, { status, user }: any): any;

        namespace log {
            function Log(...args: any[]): void;

            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, paymentIds, user }: any): any;

            function query({ limit, after, before, types, paymentIds, user }: any): any;

        }

    }

    export namespace brcodePreview {
        function BrcodePreview(...args: any[]): void;

        function query({ brcodes, limit, user }: any): any;

    }

    export namespace darfPayment {
        function DarfPayment(...args: any[]): void;

        function create(payments: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, ids, status, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, tags, ids, status, user }: any): any;

        namespace log {
            function Log(...args: any[]): void;

            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, paymentIds, user }: any): any;

            function query({ limit, after, before, types, paymentIds, user }: any): any;

        }

    }

    export namespace deposit {
        function Deposit(...args: any[]): void;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, status, sort, tags, ids, user }: any): any;

        function query({ limit, after, before, status, sort, tags, ids, user }: any): any;

        namespace log {
            function Log(...args: any[]): void;

            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, depositIds, user }: any): any;

            function query({ limit, after, before, types, depositIds, user }: any): any;

        }

    }

    export namespace dictKey {
        function DictKey(...args: any[]): void;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, status, tags, ids, user }: any): any;

        function query({ limit, after, before, status, tags, ids, user }: any): any;

    }

    export namespace error {
        function InputError(...args: any[]): { error: string, message: string};

        function InputErrors(...args: any[]): { error: string, message: string};

        function InternalServerError(...args: any[]): { error: string, message: string};

        function InvalidSignatureError(...args: any[]): { error: string, message: string};

        namespace InputError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

        }

        namespace InputErrors {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

        }

        namespace InternalServerError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

        }

        namespace InvalidSignatureError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

        }

    }

    export namespace event {
        function Event(...args: any[]): void;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, isDelivered, user }: any): any;

        function parse({ content, signature, user }: any): any;

        function query({ limit, after, before, isDelivered, user }: any): any;

        function update(id: any, { isDelivered, user }: any): any;

        namespace attempt {
            function Attempt(...args: any[]): void;

            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, eventIds, webhookIds, user }: any): any;

            function query({ limit, after, before, eventIds, webhookIds, user }: any): any;

        }

    }

    export namespace institution {
        function Institution(...args: any[]): void;

        function query({ limit, search, spiCodes, strCodes, user }: any): any;

    }

    export namespace invoice {
        function Invoice(...args: any[]): void;

        function create(Invoices: Invoice[], { user }: Project): Promise<Invoice[]>;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, status, tags, ids, user }: any): any;

        function payment(id: any, { user }: any): any;

        function pdf(id: any, { user }: any): any;

        function qrcode(id: any, { size = 7, user }: any): any;

        function query({ limit, after, before, status, tags, ids, user }: any): any;

        function update(id: any, { amount, status, due, expiration, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, invoiceIds, user }: any): any;

            function pdf(id: any, { user }: any): any;

            function query({ limit, after, before, types, invoiceIds, user }: any): any;

        }

    }

    export namespace key {
        function create(path: any): any;

    }

    export namespace organization {
        class Organization {
            constructor(...args: any[]);

            accessId(...args: any[]): void;

        }

        function replace(organization: any, workspaceId: any): any;

    }

    export namespace paymentPreview {
        function PaymentPreview(...args: any[]): void;

        function create(previews: any, { user }: any): any;

    }

    export namespace paymentRequest {
        function PaymentRequest(...args: any[]): void;

        function create(paymentRequests: any, { user }: any): any;

        function page({ cursor, centerId, limit, after, before, sort, status, type, tags, ids, user }: any): any;

        function query({ centerId, limit, after, before, sort, status, type, tags, ids, user }: any): any;

    }

    export namespace taxPayment {
        function TaxPayment(...args: any[]): void;

        function create(payments: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, ids, status, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, tags, ids, status, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor = null, limit = null, after = null, before = null, types = null, paymentIds = null, user = null }: any): any;

            function query({ limit = null, after = null, before = null, types = null, paymentIds = null, user = null }: any): any;

        }

    }

    export namespace transaction {
        function Transaction(...args: any[]): void;

        function create(transactions: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, externalIds, ids, user }: any): any;

        function query({ limit, after, before, tags, externalIds, ids, user }: any): any;

    }

    export namespace transfer {
        function Transfer(...args: any[]): void;

        function create(transfers: Transfer[], { user }: any): Promise<Transfer[]>;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, transactionIds, status, taxId, sort, tags, ids, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, transactionIds, status, taxId, sort, tags, ids, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor, limit, after, before, types, transferIds, user }: any): any;

            function query({ limit, after, before, types, transferIds, user }: any): any;

        }

    }

    export namespace utilityPayment {
        function UtilityPayment(...args: any[]): void;

        function create(payments: any, { user }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, after, before, tags, ids, status, user }: any): any;

        function pdf(id: any, { user }: any): any;

        function query({ limit, after, before, tags, ids, status, user }: any): any;

        namespace log {
            function get(id: any, { user }: any): any;

            function page({ cursor = null, limit = null, after = null, before = null, types = null, paymentIds = null, user = null }: any): any;

            function query({ limit = null, after = null, before = null, types = null, paymentIds = null, user = null }: any): any;

        }

    }

    export namespace webhook {
        function Webhook(...args: any[]): void;

        function create({ url, subscriptions, user = null }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor = null, limit = null, user = null }: any): any;

        function query({ limit = null, user = null }: any): any;

    }

    export namespace workspace {
        function Workspace(...args: any[]): void;

        function create({ username, name, allowedTaxIds = null, user = null }: any): any;

        function get(id: any, { user }: any): any;

        function page({ cursor, limit, username, ids, user }: any): any;

        function query({ limit, username, ids, user }: any): any;

        function update(id: any, { username, name, allowedTaxIds, user }: any): any;

    }


};